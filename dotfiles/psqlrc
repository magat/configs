------------------------------------------------------------------------------
-- sources:
-- https://github.com/heroku/heroku-pg-extras
-- https://github.com/dlamotte/dotfiles/blob/master/psqlrc
-- http://opensourcedbms.com/dbms/psqlrc-psql-startup-file-for-postgres/    --
-- http://www.craigkerstiens.com/2013/02/21/more-out-of-psql/               --
-- heavily inspired by killbulle


--------- CONFIGURATION ---------------
-- set quiet mode during configuration.
\set QUIET ON

\x auto
-- history file configuration
\set HISTFILE ~/.psql_history
\set HISTSIZE 2000
-- null character
\pset null 'Â¤'
-- set the prompt to look awesome and use colors
\set PROMPT1 '%[%033[31;1m%]%n%[%033[33;1m%]@%[%033[32;1m%]%M%[%033[0m%] %[%033[37;1m%]%/%[%033[0m%]%`date +" %H:%M:%S"` %#'
\set PROMPT2 '%R>'
-- keyword completion
\set COMP_KEYWORD_CASE upper
-- timing all queries
\timing
-- encoding
\encoding unicode
-- pretty lines when displaying query results
\pset linestyle unicode
\pset border 2
-- wrap content to display all columns on the page
\pset format wrapped
-- columns configuration is fucked when inside a docker container
\pset columns 272
-- exit the quiet mode when configuration is over
\set QUIET OFF
---------------------------------------


--------- HOME : display all available commands

\echo 'Current Host Server Date Time : '`date` '\n'
\echo 'Administrative queries:'

\echo '\t:activity\t-- Server activity : all current queries'
\set activity 'SELECT pid, application_name, usename, datname, age(now(),query_start) as running_for, query, state FROM pg_stat_activity;'
\echo '\t:connections\t-- Server connections'
\set connections 'SELECT usename, datname, COUNT(1) AS connections FROM pg_stat_activity GROUP BY usename, datname;'
\echo '\t:dbsize\t\t-- Database Size'
\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY datname;'
\echo '\t:blocking\t-- display queries holding locks other queries are waiting to be released'
\set blocking 'select  kl.pid as blocked_pid,ka.query as blocked_statement,  now() - a.query_start as blocked_duration,bl.pid as blocking_pid,a.query as blocking_statement,  now() - ka.query_start as blocking_duration from pg_catalog.pg_locks bl join pg_catalog.pg_stat_activity a on bl.pid = a.pid join pg_catalog.pg_locks kl join pg_catalog.pg_stat_activity ka on kl.pid = ka.pid on bl.transactionid = kl.transactionid and bl.pid != kl.pid where not bl.granted;'
\echo '\t:locks\t\t-- display queries with active locks'
\set locks  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'
\echo '\t:long_queries\t-- show all queries taking longer than five minutes ordered by duration'
\set long_running_queries 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''5 minutes'' ORDER BY now() - pg_stat_activity.query_start DESC;'
\echo '\t:tablesize\t-- Tables Size'
\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'
\echo '\t:uptime\t\t-- Server uptime'
\set uptime 'select now() - pg_postmaster_start_time() AS uptime;'
\echo '\t:bloat\t\t-- show table and index bloat in your database ordered by most wasteful'
\set bloat 'SELECT tablename as table_name, ROUND(CASE WHEN otta=0 THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS table_bloat, CASE WHEN relpages < otta THEN ''0'' ELSE pg_size_pretty((bs*(sml.relpages-otta)::bigint)::bigint) END AS table_waste, iname as index_name, ROUND(CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages/iotta::numeric END,1) AS index_bloat, CASE WHEN ipages < iotta THEN ''0'' ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS index_waste FROM ( SELECT schemaname, tablename, cc.reltuples, cc.relpages, bs, CEIL((cc.reltuples*((datahdr+ma- (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)) AS otta, COALESCE(c2.relname,''?'') AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages, COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta FROM ( SELECT ma,bs,schemaname,tablename, (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr, (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2 FROM ( SELECT schemaname, tablename, hdr, ma, bs, SUM((1-null_frac)*avg_width) AS datawidth, MAX(null_frac) AS maxfracsum, hdr+( SELECT 1+count(*)/8 FROM pg_stats s2 WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename) AS nullhdr FROM pg_stats s, ( SELECT (SELECT current_setting(''block_size'')::numeric) AS bs, CASE WHEN substring(v,12,3) IN (''8.0'',''8.1'',''8.2'') THEN 27 ELSE 23 END AS hdr, CASE WHEN v ~ ''mingw32'' THEN 8 ELSE 4 END AS ma FROM (SELECT version() AS v) AS foo) AS constants GROUP BY 1,2,3,4,5) AS foo) AS rs JOIN pg_class cc ON cc.relname = rs.tablename JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = rs.schemaname AND nn.nspname <> ''information_schema'' LEFT JOIN pg_index i ON indrelid = cc.oid LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid) AS sml ORDER BY CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END DESC;'
\echo '\t:cache_hit\t-- calculates your cache hit rate (effective databases are at 99% and up)'
\set cache_hit 'SELECT ''index hit rate'' as name, (sum(idx_blks_hit)) / sum(idx_blks_hit + idx_blks_read) as ratio FROM pg_statio_user_indexes union all SELECT ''cache hit rate'' as name, sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratio FROM pg_statio_user_tables;'
\echo '\t:index_size\t-- show the size of the indexes, descending by size'
\set index_size 'SELECT relname AS name, pg_size_pretty(sum(relpages*1024)) AS size FROM pg_class WHERE reltype=0 GROUP BY relname ORDER BY sum(relpages) DESC;'
\echo '\t:index_usage\t-- calculates your index hit rate (effective databases are at 99% and up)'
\set index_usage 'SELECT relname, CASE idx_scan WHEN 0 THEN ''Insufficient data'' ELSE (100 * idx_scan / (seq_scan + idx_scan))::text END percent_of_times_index_used, n_live_tup rows_in_table FROM pg_stat_user_tables ORDER BY n_live_tup DESC;'
\echo '\t:total_index_size\t-- show the total size of the indexes in MB'
\set total_index_size 'SELECT pg_size_pretty(sum(relpages*1024)) AS size FROM pg_class WHERE reltype=0;'
\echo '\t:unused_indexes\t\t-- Show unused and almost unused indexes, ordered by their size relative'
\echo '\t\t\t\t   to the number of index scans. Exclude indexes of very small tables (< 5 pages),'-\echo '\t\t\t\t   where the planner will almost invariably select a sequential scan, but may not'
\echo '\t\t\t\t   in the future as the table grows.'
\set unused_indexes 'SELECT schemaname || ''.'' || relname AS table, indexrelname AS index, pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size, idx_scan as index_scans FROM pg_stat_user_indexes ui JOIN pg_index i ON ui.indexrelid = i.indexrelid WHERE NOT indisunique AND idx_scan < 50 AND pg_relation_size(relid) > 5 * 8192 ORDER BY pg_relation_size(i.indexrelid) / nullif(idx_scan, 0) DESC NULLS FIRST, pg_relation_size(i.indexrelid) DESC;'


\echo '\nHelp:'
\echo '\t\\?\t\t-- Help with psql commands'
\echo '\t\\h\t\t-- Help with SQL commands'
\echo '\t\\x\t\t-- Extended display'
\echo '\t\\l\t\t-- List databases'
\echo '\t\\d\t\t-- List tables'
\echo '\t\\d table\t\t-- List column for table'
\echo '\t:clear\t\t-- Clear screen'
\set clear '\\! clear;'
\echo '\t:menu\t\t-- This help menu\n'
\set menu '\\i ~/.psqlrc'

-- Administration queries
